variables:
    CC: "gcc"                                   # eg. gcc or clang
    CXX: "g++"                                  # eg. g++ or clang++
    CONAN_PROFILE: "gcc-release"                # profile to use with conan
    CMAKE_GENERATOR: "-G Ninja"                 # include -G if defined
    BUILD_DIRECTORY: "build-in-docker"          # build directory name
    SOURCE_DIRECTORY: ".."                      # where cmake search source files from the build directory
    TARGET: "check"                             # target to invoke
    CLEAN: "OFF"                                # whether to rm -rf * in build directory before running cmake
    TESTS: "ON"                                 # build and run unit tests
    EXAMPLES: "ON"                              # build and run examples
    BENCHMARKS: "ON"                            # build and run benchmarks
    COVERAGE: "OFF"                             # build and run with coverage flags

stages:
    - build
    - doc

.job-basic-build-linux: &distcheck-basic-linux
    stage: build
    image: mroynard/ubuntu-toolset:stable
    script:
      - set -e
      - export CC=$CC
      - export CXX=$CXX
      - $CXX --version
      - mkdir -p $BUILD_DIRECTORY
      - cd $BUILD_DIRECTORY
      - if [ "$CLEAN" == "ON" ]; then rm -rf ./*; fi
      - conan install ..
              --build missing
              -pr $CONAN_PROFILE
      - cmake $CMAKE_GENERATOR
              -DWITH_TESTS=$TESTS
              -DWITH_EXAMPLES=$EXAMPLES
              -DWITH_BENCHMARK=$BENCHMARKS
              -DWITH_CODE_COVERAGE=$COVERAGE
              $SOURCE_DIRECTORY
      - cmake --build .
              --target $TARGET
              --config $RELEASE_TYPE

distcheck-linux-gcc-release:
    <<: *distcheck-basic-linux
    variables:

distcheck-linux-clang-release:
    <<: *distcheck-basic-linux
    variables:
        CC: "clang"
        CXX: "clang++"
        CONAN_PROFILE: "clang-release"

distcheck-linux-gcc-debug:
    <<: *distcheck-basic-linux
    variables:
        RELEASE_TYPE: "Debug"
        CONAN_PROFILE: "gcc-release"

distcheck-linux-clang-debug:
    <<: *distcheck-basic-linux
    variables:
        RELEASE_TYPE: "Debug"
        CC: "clang"
        CXX: "clang++"
        CONAN_PROFILE: "clang-debug"

documentation-builder:
    stage: doc
    image: mroynard/ubuntu-doctoolset:stable
    variables:
        BUILD_DIRECTORY: "build-in-docker-doc"
        TARGET: "docs"
        TESTS: "OFF"
        EXAMPLES: "OFF"
        BENCHMARKS: "OFF"
        COVERAGE: "OFF"
    script:
      - mkdir -p $BUILD_DIRECTORY
      - cd $BUILD_DIRECTORY
      - conan install .. --build missing
      - cmake $CMAKE_GENERATOR
              -DWITH_TESTS=$TESTS
              -DWITH_EXAMPLES=$EXAMPLES
              -DWITH_BENCHMARK=$BENCHMARKS
              -DWITH_CODE_COVERAGE=$COVERAGE
              $SOURCE_DIRECTORY
      - cmake --build . --target $TARGET
# Artifact is too large !
#    artifacts:
#        name: "documentation"
#        paths:
#            - $BUILD_DIRECTORY/doc/api
#            - $BUILD_DIRECTORY/doc/user
#        expire_in: 14 days
